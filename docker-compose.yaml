#version: "3.9"
services:
  keycloak_web:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak_web
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: password
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: start-dev
    depends_on:
      - postgres
    ports:
      - 8090:8080
    networks:
      - snap-aspi
      
  postgres:
    image: ${POSTGRES_IMAGE:-postgres:16}
    container_name: ${POSTGRES_CONTAINER:-postgres}
    restart: on-failure
    ports:
      - "${POSTGRES_OUTER_PORT:-5432}:5432"
    environment:
      TZ: ${TZ:-Etc/UTC}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-blnk}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - snap-aspi

  redis:
    image: redis
    restart: always
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - snap-aspi

  gateway:
    build: ./gateway
    image: gateway
    container_name: gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "256m"
    networks:
      - snap-aspi

  snap_auth:
    build: ./snap_auth
    image: snap_auth
    container_name: snap_auth
    restart: unless-stopped
    ports:
      - "30051:8080"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "256m"
    networks:
      - snap-aspi

  snap_signature:
    build: ./snap_signature
    image: snap_signature
    container_name: snap_signature
    restart: unless-stopped
    ports:
      - "30052:8080"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "256m"
    networks:
      - snap-aspi

  snap_backend:
    build: ./snap_backend
    image: snap_backend
    container_name: snap_backend
    restart: unless-stopped
    ports:
      - "30053:8080"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "256m"
    networks:
      - snap-aspi

  snap_inquiry:
    build: ./snap_inquiry
    image: inquiry
    container_name: inquiry
    restart: unless-stopped
    ports:
      - "30054:8080"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "256m"
    networks:
      - snap-aspi

  snap_history:
    build: ./snap_history
    image: history
    container_name: history
    restart: unless-stopped
    ports:
      - "30055:8080"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "256m"
    networks:
      - snap-aspi

  snap_transfer:
    build: ./snap_transfer
    image: transfer
    container_name: transfer
    restart: unless-stopped
    ports:
      - "30056:8080"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "256m"
    networks:
      - snap-aspi

  snap_inquiryv2:
    build: ./snap_inquiryv2
    image: v2
    container_name: inquiryv2
    restart: unless-stopped
    ports:
      - "30057:8080"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "256m"
    networks:
      - snap-aspi

  snap_historyv2:
    build: ./snap_historyv2
    image: historyv2
    container_name: historyv2
    restart: unless-stopped
    ports:
      - "30058:8080"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "256m"
    networks:
      - snap-aspi

  snap_transferv2:
    build: ./snap_transferv2
    image: transferv2
    container_name: transferv2
    restart: unless-stopped
    ports:
      - "30059:8080"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "256m"
    networks:
      - snap-aspi

  snap_ratelimiter:
    build: ./snap_ratelimiter
    image: ratelimiter
    container_name: ratelimiter
    restart: unless-stopped
    ports:
      - "30061:8080"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "256m"
    networks:
      - snap-aspi

  snap_storage:
    build: ./snap_storage
    image: storage
    container_name: storage
    restart: unless-stopped
    ports:
      - "30062:8080"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "256m"
    networks:
      - snap-aspi

networks:
  snap-aspi:
    driver: bridge
    name: snap-aspi

volumes:
  pg_data: